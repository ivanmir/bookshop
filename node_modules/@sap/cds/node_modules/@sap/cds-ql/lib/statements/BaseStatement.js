const {addToQueue} = require('./queue')
const {getColumns} = require('@sap/cds-sql').utils
const {IllegalFunctionArgumentError} = require('../errors')

class BaseStatement {
  constructor (dml) {
    this[dml] = {}

    // If true it means that the statement is created within a block
    if (addToQueue(this)) {
      // Capture a promise chain synchronous, so it can be executed later on
      this._promised = []

      this.catch = (fn) => {
        this._promised.push({
          type: 'catch',
          fn: fn
        })

        return this
      }

      this.then = (fn) => {
        this._promised.push({
          type: 'then',
          fn: fn
        })

        return this
      }
    }
  }

  static _processProjections (entityName, model) {
    if (model && model.definitions[entityName] && model.definitions[entityName].source) {
      return this._processProjectionEntity(model, model.definitions[entityName])
    }

    return {entityName: entityName}
  }

  static _processProjectionEntity (model, entity) {
    const res = {entityName: entity.source || entity.name}
    res.columnMap = new Map()
    const columns = getColumns(model, entity)
    for (const column of columns) {
      if (column.value && !column.value['='].endsWith(`.${column.name}`)) {
        res.columnMap.set(column.name, column.value['=']) // {ref: [column.value['=']], as: column.name}
      } else {
        res.columnMap.set(column.name, column.name) // {ref: [column.name]}
      }
    }

    return res
  }

  static _isEntity (value) {
    if (value) {
      const entity = value.source || value.name || value

      if (typeof entity === 'string') {
        return entity
      }
    }

    throw new IllegalFunctionArgumentError('entity')
  }
}

module.exports = BaseStatement
