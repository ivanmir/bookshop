const _servicesToOption = (services) => {
  const keys = Object.keys(services)

  // filer has to be with service type {hana: {name: 'service-name'}}
  if (typeof services[keys[0]] === 'object') {
    return services[keys[0]]
  }

  return services
}

const _findByType = (type) => {
  if (typeof type !== 'string') {
    return
  }

  try {
    return require('@sap/xsenv').getServices({
      [type]: {
        tag: type
      }
    })
  } catch (e) {
    if (type.startsWith('managed-')) {
      return
    }

    return _findByType(`managed-${type}`)
  }
}

const _autoServiceLookUp = (options) => {
  const services = _findByType(options.driver || 'hana')

  if (!services) {
    return
  }

  options.driver = Object.keys(services)[0].replace('managed-', '')

  Object.assign(options, _servicesToOption(services), {driver: options.driver})
}

/**
 * Check the options for a filter object to be used with xsenv.getServices.
 * If non are given, try auto lookup.
 * @param options
 * @private
 */
const _getServiceFilter = (options) => {
  const properties = ['name', 'label', 'tag', 'plan']
  const filter = {}

  for (const property of Object.keys(options)) {
    if (typeof options[property] === 'string' && properties.includes(property)) {
      filter[property] = options[property]
    } else if (typeof options[property] === 'object' && property !== 'pool') {
      const filtered = _getServiceFilter(options[property])

      if (Object.keys(filtered).length !== 0) {
        filter[property] = filtered
      }
    }
  }

  return filter
}

const _hasXsenv = () => {
  try {
    require.resolve('@sap/xsenv')
    return true
  } catch (e) {
    return false
  }
}

const _flatToDeep = (options, filter) => {
  if (typeof filter[Object.keys(filter)[0]] === 'object') {
    return filter
  }

  return {
    [options.driver]: filter
  }
}

/**
 * Try to find the (db) service credentials for given options
 * @param {Object} options
 * @private
 */
const addCredentialsFromXsEnv = (options) => {
  if (!_hasXsenv()) {
    return
  }

  const filter = _getServiceFilter(options)

  if (Object.keys(filter).length === 0) {
    return _autoServiceLookUp(options)
  }

  const service = _servicesToOption(require('@sap/xsenv').getServices(_flatToDeep(options, filter)))

  // options from xsenv will contain the property driver, which overwrites the one defined at connect.
  Object.assign(options, service, {driver: options.driver})
}

module.exports = addCredentialsFromXsEnv
