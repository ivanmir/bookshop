const cds = require('../cds')
const {InvalidQuotingStyleError} = require('../').errors

const _slugify = name => name.replace(/::/g, '__').replace(/\./g, '_')

const quotingStyles = {
  'quoted': (name, delimiter) => `${delimiter}${name}${delimiter}`,
  'plain': name => _slugify(name),
  'all-upper': (name, delimiter) => `${delimiter}${_slugify(name.toUpperCase())}${delimiter}`,
  'all-lower': (name, delimiter) => `${delimiter}${_slugify(name.toLowerCase())}${delimiter}`,
  'bracketed': name => `[${name}]`
}

/**
 * BaseBuilder class should not be instantiated. *
 */
class BaseBuilder {
  /**
   * The base class constructor for the builders.
   * If the options parameter is not specified, " are used as delimiter and ? as placeholders.
   *
   * @param {object} obj - The CQN object used for the insert operation
   * @param {object} [options] - The configuration object.
   * @param {string} [options.delimiter] - The delimiter string.
   * @param {string} [options.placeholder] - The placeholder for prepared statement.
   */
  constructor (obj, options) {
    this._obj = obj
    const dafaultOptions = {
      placeholder: '?',
      delimiter: '"',
      entityNames: [],
      user: 'ANONYMOUS',
      now: {sql: 'NOW ()'}
    }
    this._options = Object.assign(dafaultOptions, options)
    this._quotingStyle = cds.config.data.sql_mapping || 'plain'
    this._validateQuotingStyle()
  }

  _validateQuotingStyle () {
    if (typeof this._quotingStyle !== 'string' || !quotingStyles.hasOwnProperty(this._quotingStyle)) {
      throw new InvalidQuotingStyleError(this._quotingStyle)
    }
  }

  _quoteElement (element) {
    return quotingStyles[this._quotingStyle](element, this._options.delimiter)
  }
}

module.exports = BaseBuilder
