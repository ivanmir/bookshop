'use strict';

const BatchEvents = require('../../batch/BatchExitHandler');
const Command = require('../Command');

/**
 * Invokes the listener registered to be called if a atomicity group should be processed
 *
 * @extends Command
 */
class AtomicityGroupStartCommand extends Command {

    constructor(batchContext, atomicityGroupId) {
        super();

        /**
         * Batch context
         * @type {BatchContext}
         * @private
         */
        this._batchContext = batchContext;

        /**
         * Atomicity group id
         * @type {string}
         * @private
         */
        this._atomicityGroupId = atomicityGroupId;

        /**
         * The registered listener function of the application
         * @type {Function}
         * @private
         */
        this._listener = batchContext.getService().getComponentManager()
            .getComponent(BatchEvents.ATOMICITY_GROUP_START);

        /**
         * @type {Array<OdataRequestInBatch>}
         * @private
         */
        this._requests = [];
    }

    /**
     * Add a request to the request list of the atomicity group
     *
     * @param {OdataRequestInBatch} request
     */
    addRequest(request) {
        this._requests.push(request);
    }

    /**
     * Executes the listener. The listener must execute the provided next function.
     *
     * @param {Command~Next} next
     */
    execute(next) {
        if (!this._listener) {
            return next();
        }

        const context = {
            applicationData: this._batchContext.getRequest().getApplicationData(),
            id: this._atomicityGroupId
        };


        try {
            return this._listener(context, (applicationError) => {
                if (applicationError) {
                    this._batchContext.markAtomicityGroupAsFailed(this._atomicityGroupId, applicationError);
                }

                return next(applicationError);
            });
        } catch (unplannedException) {
            this._batchContext.markAtomicityGroupAsFailed(this._atomicityGroupId, unplannedException);
            return next(unplannedException);
        }

    }
}

module.exports = AtomicityGroupStartCommand;
