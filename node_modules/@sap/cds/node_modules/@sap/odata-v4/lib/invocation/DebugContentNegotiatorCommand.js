'use strict';

const ContentNegotiatorCommand = require('./ContentNegotiatorCommand');
const QueryOptions = require('../uri/UriInfo').QueryOptions;
const ContentTypes = require('../format/ContentTypeInfo').ContentTypes;
const RepresentationKinds = require('../format/RepresentationKind').Kinds;

/**
* The `next` callback to be called upon finish execution.
*
* @callback Next
* @param {?Error} error An error if there is one or null if not
*/

/**
 * Executes the content negotiation in case of debug mode.
 *
 * @extends ContentNegotiatorCommand
 */
class ContentNegotiatorDebugCommand extends ContentNegotiatorCommand {

    /**
     * Creates an instance of ContentNegotiatorDebugCommand.
     *
     * @param {OdataRequest} request the current OData request
     * @param {OdataResponse} response the current OData response
     * @param {FormatManager} formatManager The current instance of format manager
     * @param {ResponseContentNegotiator} contentNegotiator The current instance of ResponseContentNegotiator
     * @param {LoggerFacade} logger the logger
     */
    constructor(request, response, formatManager, contentNegotiator, logger) {
        super(request, response, formatManager, contentNegotiator, logger);
    }

    /**
     * Executes the content negotiation in debug mode.
     * The content negotiation creates a `ResponseContract` object
     * as a result with all necessary content negotiation information.
     * The contract object is attached to the odata context instance.
     *
     * @param {Next} next The next callback to be called on finish
     */
    execute(next) {
        if (this._response.isHeadersSent()) {
            this._logger.debug('Headers already sent');
        } else {
            const queryOptions = this._request.getQueryOptions();
            let resultingContentType = null;

            if (queryOptions[QueryOptions.ODATA_DEBUG] === 'json') {
                resultingContentType = ContentTypes.JSON;
            }

            if (queryOptions[QueryOptions.ODATA_DEBUG] === 'html') {
                resultingContentType = ContentTypes.HTML;
            }

            const formatManager = super.getFormatManager();
            const contract = super.getNegotiator()
                .negotiateContentType(formatManager, RepresentationKinds.DEBUG, resultingContentType);

            this._response.setContract(contract);

            this._logger.debug('Debug response contract contentTypeInfo: ', contract.getContentTypeInfo());
        }
        next();
    }
}

module.exports = ContentNegotiatorDebugCommand;
