'use strict';

const Command = require('./Command');
const ConditionalRequestValidator = require('../validator/ConditionalRequestValidator');
const Methods = require('../http/HttpMethod').Methods;
const ResourceKinds = require('../uri/UriResource').ResourceKind;
const StateMachine = require('../utils/StateMachine');

/**
* The `next` callback to be called upon finish execution.
*
* @callback Next
* @param {?Error} error An error if there is one or null if not
*/

/**
 * Executes the validation of the request conditional request.
 */
class ConditionalRequestValidationCommand extends Command {

    /**
     * Creates an instance of ConditionalRequestValidationCommand.
     *
     * @param {OdataRequest} request the current OData request
     * @param {LoggerFacade} logger the logger
     */
    constructor(request, logger) {
        super();
        this._request = request;
        this._logger = logger;
    }

    execute(next) {
        this._logger.path('Entering ConditionalRequestPreValidationCommand.execute()...');

        const uriInfo = this._request.getUriInfo();
        const isConcurrentResource = this._request.getConcurrentResource() !== null;

        this._logger.info('Requested resource is concurrent: ', isConcurrentResource);

        const ifNoneMatch = this._request.getHeader('if-none-match');
        const ifMatch = this._request.getHeader('if-match');
        const method = this._request.getMethod();
        const isValidOperation = method === Methods.GET
            || method === Methods.PUT || method === Methods.PATCH
            || method === Methods.DELETE
            || method === Methods.POST && uriInfo.getLastSegment().getKind() === ResourceKinds.REF_COLLECTION
            || uriInfo.getLastSegment().getKind() === ResourceKinds.BOUND_ACTION;

        if (isValidOperation && (ifMatch != null || ifNoneMatch != null || isConcurrentResource)) {
            this._logger.info('Request is conditional: true');
            this._logger.debug('Header If-Match:', "'" + ifMatch + "'", 'If-None-Match:', "'" + ifNoneMatch + "'");

            const stateMachine = new StateMachine(
                ConditionalRequestValidator.createStateMachineContext(this._logger), this._logger
            ).on('error', next).on('Final', next);

            new ConditionalRequestValidator(stateMachine)
                .startWith(ConditionalRequestValidator.STATES.INITIAL)
                .validate({ ifMatch, ifNoneMatch, method, isConcurrentResource });

            this._logger.debug('Conditional request processing state history (after pre validation): ',
                stateMachine.getHistory());

        } else {
            next();
        }
    }
}

module.exports = ConditionalRequestValidationCommand;
