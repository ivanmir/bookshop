'use strict';

const AnnotationFactory = require('./AnnotationExpressionFactory');
const CsdlAnnotationExpression = require('../../csdl/annotationExpression/CsdlAnnotationExpression');
const EdmAnnotationExpression = require('./EdmAnnotationExpression');
const IllegalArgumentError = require('../../errors/IllegalArgumentError');

/**
 *
 * <a href="./../ODataSpecification/odata-v4.0-errata03-os/complete/part3-csdl/odata-v4.0-errata03-os-part3-csdl-complete.html#_Toc453752654">
 *     OData CSDL # 14.5.8 Expression edm:LabeledElement
 * </a>
 *
 * @extends EdmAnnotationExpression
 * @hideconstructor
 */
class EdmLabeledElementExpression extends EdmAnnotationExpression {

    /**
     * @param {Edm} edm The edm itself
     * @param {CsdlLabeledElementExpression} labeledElement
     */
    constructor(edm, labeledElement) {
        if (!edm) {
            throw IllegalArgumentError.createForIllegalInstance('edm', 'Edm');
        }
        if (!labeledElement) {
            throw IllegalArgumentError.createForIllegalInstance('labeledElement', 'CsdlLabeledElementExpression');
        }

        super(CsdlAnnotationExpression.kinds.LabeledElement);


        /**
         * @type {Edm}
         * @private
         */
        this._edm = edm;

        /**
         * @type {CsdlLabeledElementExpression}
         * @private
         */
        this._labeledElement = labeledElement;

        /**
         * @type {EdmAnnotationExpression}
         * @private
         */
        this._expression = AnnotationFactory.createEdmExpressionFromCsdlExpression(edm, labeledElement.expression);

        /**
         * @type {EdmAnnotation[]}
         * @private
         */
        this._annotations = null;
    }

    /**
     * Return the label name
     *
     * @returns {string} label name
     */
    getName() {
        return this._labeledElement.name;
    }

    /**
     * Returns the labeled expression
     *
     * @returns {EdmAnnotationExpression}
     */
    getExpression() {
        return this._expression;
    }

    /**
     * Returns the annotations for this cast expression
     *
     * @returns {EdmAnnotation[]}
     */
    getAnnotations() {
        if (this._annotations) {
            return this._annotations;
        }

        this._annotations = [];
        for (let item of this._labeledElement.annotations) {
            this._annotations.push(AnnotationFactory.createAnnotation(this._edm, item));
        }

        return this._annotations;
    }
}

module.exports = EdmLabeledElementExpression;
