'use strict';

const BadRequestError = require('../errors/BadRequestError');
const validateThat = require('./ParameterValidator').validateThat;

/**
 * Utilities for the OData Version
 */
class VersionValidator {
    /**
     * Creates an instance of VersionValidator
     *
     * @param {string} supportedVersion - The input OData version, as a string.
     * @throws {Error} If supportedVersion does not exist, is not a string or is an invalid string
     */
    constructor(supportedVersion) {
        validateThat('supportedVersion', supportedVersion).truthy().typeOf('string');
        this._validateVersionString(supportedVersion);

        this._supportedVersion = supportedVersion;
    }

    /**
     * Returns the supported odata version.
     *
     * @returns {string}
     */
    getSupportedVersion() {
        return this._supportedVersion;
    }

    /**
     * Compares the given version to the supported OData version. Returns true if they are equal, or false otherwise.
     *
     * @param {string} version - The version to be tested. Its string must follow the
     * odata-abnf-construction-rules: 1*DIGIT "." 1*DIGIT
     * @returns {boolean}
     */
    isEqualToSupported(version) {
        this._validateVersionString(version);

        return this._supportedVersion === version;
    }

    /**
     * Compares the given max-acceptable version to the supported OData version.
     * Returns true if max is higher than or equal to the supported version, or false otherwise.
     *
     * @param {string} max - The version to be tested. Its string must follow the
     * odata-abnf-construction-rules: 1*DIGIT "." 1*DIGIT
     * @returns {boolean}
     */
    isMaxEqOrGtSupported(max) {
        this._validateVersionString(max);

        return this._supportedVersion <= max;
    }

    /**
     * Validates that a version string follows the odata-abnf-construction-rules: 1*DIGIT "." 1*DIGIT
     *
     * @param {string} ver - String to be tested
     * @throws {BadRequestError} If the version string is invalid
     * @private
     */
    _validateVersionString(ver) {
        if (!/^[0-9]\.[0-9]$/.test(ver)) {
            throw new BadRequestError('"' + ver + '" is not a valid version');
        }
    }
}

module.exports = VersionValidator;
