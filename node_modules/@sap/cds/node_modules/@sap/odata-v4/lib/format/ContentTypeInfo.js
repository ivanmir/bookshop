'use strict';

const HeaderInfo = require('../http/HeaderInfo');

/**
 * Used to store the parts of a content type.
 *
 * @extends HeaderInfo
 * @hideconstructor
 */
class ContentTypeInfo extends HeaderInfo {

    /**
     * Constructor
     *
     * @param {string} typeAndSubtype - Mime type and subtype
     * @param {string} value - Header value
     * @param {Buffer|string} [rawHeader]  - Raw header
     */
    constructor(typeAndSubtype, value, rawHeader) {

        super('content-type', value, rawHeader);

        this._typeAndSubtype = typeAndSubtype;

        /**
         * @type {Array.<{name:string,value:string}>}
         * @private
         */
        this._parameters = [];
    }

    /**
     * Set the type and subtype part of the content type.
     * @param typeAndSubtype
     * @returns {ContentTypeInfo}
     * @package
     */
    setTypeAndSubtype(typeAndSubtype) {
        this._typeAndSubtype = typeAndSubtype;
        return this;
    }

    /**
     * Returns the corresponding mime type (type/subtype) without any parameters.
     * Example: application/json
     *
     * @returns {string} The corresponding mime type
     * @package
     */
    getMimeType() {
        return this._typeAndSubtype;
    }

    /**
     * Returns an array containing all parameters contained in the content-type string.
     * @returns {Array.<{name:string,value:string}>}
     */
    getParameters() {
        return this._parameters;
    }

    /**
     * Returns the value or values of a parameters.
     *
     * @param {string} name Name of the parameter
     * @returns {string|string[]}
     */
    getParameter(name) {
        const values = this._parameters
            .filter(nameValue => nameValue.name === name)
            .map(nameValue => nameValue.value);
        if (!values || values.length === 0) return null;
        if (values.length === 1) return values[0];
        return values;
    }

    /**
     * Add a parameter.
     * @param {string} name name of the parameter
     * @param {string} value value of the parameter
     * @returns {ContentTypeInfo} this instance
     * @package
     */
    addParameter(name, value) {
        this._parameters.push({ name: name, value: value });
        return this;
    }

    toString() {
        return this.getMimeType() + this._parameters.map(p => p.value ? ';' + p.name + '=' + p.value : '').join('');
    }
}

/**
 * MIME type
 * @enum {string}
 * @readonly
 */
ContentTypeInfo.ContentTypes = {
    XML: 'application/xml',
    JSON: 'application/json',
    HTML: 'text/html',
    TEXT_PLAIN: 'text/plain',
    BINARY: 'application/octet-stream',
    MULTIPART_MIXED: 'multipart/mixed'
};

module.exports = ContentTypeInfo;
