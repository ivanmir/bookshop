'use strict';

const url = require('url');

// const OdataRequest = require('./OdataRequest');

/**
 * Request object wrapper to carry original request information.
 *
 * @extends OdataRequest
 */
class OdataRequestInBatch {

    /**
     * Creates an instance of OdataRequestInBatch. The constructor also splits the url into service,
     * odata and query parts.
     *
     * @param {PlainHttpRequest} inRequest  A request object with {method, url, headers, payload}
     * @param {Function} serviceResolutionFn - Function to resolve the service name in the request URL.
     *      It must return an object with the 'base' and 'path' parts of the input URL.
     * @param {string} requestId
     */
    constructor(inRequest, serviceResolutionFn, requestId) {
        // super(inRequest, serviceResolutionFn);
        this._inRequest = inRequest;


        this._odataRequestId = requestId;

        /**
         * @type {Array<string>}
         * @private
         */
        this._dependsOn = [];

        this._atomicityGroupId = null;

        this._url = url.parse(this._inRequest.url);
    }

    /**
     * Rewrite the underlying url
     *
     * @param {string} newUrl
     * @package
     */
    rewriteUrl(newUrl) {
        this._inRequest.url = newUrl;
        this._url = url.parse(this._inRequest.url);
    }


    /**
     * Returns the original incoming node request message.
     *
     * @returns {IncomingMessage} the original incoming request
     */
    getIncomingRequest() {
        return this._inRequest;
    }

    /**
     * Return atomicity group id
     *
     * @returns {?string}
     */
    getAtomicityGroupId() {
        return this._atomicityGroupId;
    }

    /**
     * Set atomicity group id
     *
     * @param {string} id Atomicity group id
     * @returns {OdataRequest}
     */
    setAtomicityGroupId(id) {
        this._atomicityGroupId = id;
        return this;
    }


    /**
     * Return  OData request id
     *
     * @returns {?string}
     */
    getOdataRequestId() {
        return this._odataRequestId;
    }

    /**
     * Add the id of an request or atomicity group which MUST been successfully processed before this request can be executed
     *
     * @param {string} id - Request ID or atomicity group ID
     * @returns {OdataRequestInBatch} This instance
     * @package
     */
    addDependsOn(id) {
        this._dependsOn.push(id);
        return this;
    }

    /**
     * Returns the list of request IDs or atomicity group IDs which this request depends on
     *
     * @returns {string[]}
     */
    getDependsOnList() {
        return this._dependsOn;
    }


    /**
     * Returns the header value for a given name.
     *
     * @returns {string} The header value or undefined, if not found
     */
    getHeader(name) {
        return this._inRequest.headers[name];
    }

    /**
     * Returns all available headers.
     *
     * @returns {Object} All headers with header:headerValue
     */
    getHeaders() {
        return this._inRequest.headers;
    }

    /**
     * Returns the parsed url object parsed with node.js url module.
     *
     * @returns {Object} The parsed url object.
     */
    getUrlObject() {
        return this._url;
    }

    /**
     * Get custom application data associated with the batch request containing this request.
     * @returns {Object} data
     */
    getApplicationData() {
        return this._url;
    }
}

module.exports = OdataRequestInBatch;
