'use strict';

/**
 * Stores information which has been negotiated between client and server.
 * This includes the negotiated response content type.
 * @hideconstructor
 */
class ResponseContract {

    constructor() {

        /**
         * @type {string}
         * @private
         */
        this._locale = null;

        /**
         * @type {ContentTypeInfo}
         * @private
         */
        this._contentTypeInfo = null;

        /**
         * @type {RepresentationKind.Kinds}
         * @private
         */
        this._representationKind = null;

        /**
         * @type {Function}
         * @private
         */
        this._serializerFunction = null;
    }

    /**
     * Sets the best matched content type info (negotiated between accept header and supported formats).
     * @param {ContentTypeInfo} contentTypeInfo
     * @returns {ResponseContract}
     * @package
     */
    setContentTypeInfo(contentTypeInfo) {
        this._contentTypeInfo = contentTypeInfo;
        return this;
    }

    /**
     * Returns the best matched content type info (negotiated between accept header and supported formats).
     * @returns {ContentTypeInfo}
     */
    getContentTypeInfo() {
        return this._contentTypeInfo;
    }

    /**
     * Sets the negotiated response representation kind
     *
     * @param {RepresentationKind.Kinds} representationKind
     * @returns {ResponseContract}
     * @package
     */
    setRepresentationKind(representationKind) {
        this._representationKind = representationKind;
        return this;
    }

    /**
     * Returns the negotiated response representation kind
     *
     * @returns {RepresentationKind.Kinds}
     */
    getRepresentationKind() {
        return this._representationKind;
    }

    /**
     * Sets the negotiated serializer function which should be used to serialize the response.
     * @param {SerializerFunction} serializerFunction
     * @returns {ResponseContract}
     * @package
     */
    setSerializerFunction(serializerFunction) {
        this._serializerFunction = serializerFunction;
        return this;
    }

    /**
     * Returns the negotiated serializer function which should be used to serialize the response.
     * @returns {?SerializerFunction}
     */
    getSerializerFunction() {
        return this._serializerFunction;
    }

    /**
     * Sets the locale the response should be provided for
     * @param locale
     * @returns {ResponseContract}
     */
    setLocale(locale) {
        this._locale = locale;
        return this;
    }

    /**
     * Returns the negotiated locale or null, if none was set
     * @returns {?string}
     */
    getLocale() {
        return this._locale;
    }
}

module.exports = ResponseContract;
