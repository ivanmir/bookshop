'use strict';

const Readable = require('stream').Readable;

/**
 * Simulates an http.IncomingMessage
 * Used when parsing an multipart/mixed request into sub requests
 *
 * @extends Readable
 * @hideconstructor
 */
class PlainHttpRequest extends Readable {

    /**
     * Constructor
     */
    constructor() {
        super();
        this.method = 'GET';
        this.url = '/';
        this.version = 'HTTP/1.1';
        this.headers = {};
        this._body = null;

        this._readPosition = 0;
        this._line = null;

        this._odataRequestId = null;
        this._atomicityGroupId = null;

        /**
         * @type {OdataRequestInBatch}
         */
        this._batchInfo = null;
    }


    /**
     * Return  OData request id
     *
     * @returns {?string}
     */
    getOdataRequestId() {
        return this._odataRequestId;
    }

    /**
     * Set OData request id
     *
     * @param {string} id OData request id
     * @returns {OdataRequest}
     */
    setOdataRequestId(id) {
        this._odataRequestId = id;
        return this;

    }

    /**
     * Return atomicity group id
     *
     * @returns {?string}
     */
    getAtomicityGroupId() {
        return this._atomicityGroupId;
    }

    /**
     * Set atomicity group id
     *
     * @param {string} id Atomicity group id
     * @returns {OdataRequest}
     */
    setAtomicityGroupId(id) {
        this._atomicityGroupId = id;
        return this;
    }


    /**
     * Set the http request line
     *
     * @param {string} line
     * @returns {PlainHttpRequest} This instance
     * @package
     */
    setRequestLine(line) {
        this._line = line;
        const parts = line.toString('latin1').split(' ');

        this.setMethod(parts[0]);
        this.setUri(parts[1]);
        this.setVersion(parts[2]);
        return this;
    }

    /**
     * Return the request line
     *
     * @returns {string}
     */
    getRequestLine() {
        return this._line;
    }


    /**
     * Set the http method
     *
     * @param {string} method
     * @returns {PlainHttpRequest}
     * @package
     */
    setMethod(method) {
        this.method = method;
        return this;
    }

    /**
     * Set the uri
     *
     * @param {string} uri
     * @returns {PlainHttpRequest}
     * @package
     */
    setUri(uri) {
        this.url = uri;
        return this;
    }

    /**
     * Set the http version
     *
     * @param {string} version
     * @returns {PlainHttpRequest}
     * @package
     */
    setVersion(version) {
        this.version = version;
        return this;
    }

    /**
     * Set the headers object
     *
     * @param {Object} version
     * @returns {PlainHttpRequest}
     * @package
     */
    setHeaders(headers) {
        this.headers = headers;
    }

    /**
     * Set the body
     *
     * @param {Buffer} buffer
     * @returns {PlainHttpRequest}
     * @package
     */
    setBody(buffer) {
        this._body = buffer;
    }

    /**
     * Readable implementation
     *
     * @param {number} size
     * @private
     */
    _read(size) {
        if (!this._body) {
            this.push(null);
            return;
        }
        if (this._readPosition >= this._body.length) {
            this.push(null);
            return;
        }

        const pushTo = Math.min(this._body.length, this._readPosition + size);

        this.push(this._body.slice(this._readPosition, pushTo));

        this._readPosition = pushTo;
    }

    /**
     * Returns odataRequestInBatch object with meta information (e.g. dependencies)
     * So this _batchInfo is used to tranport information from the batch request
     * to the batched request / sub request
     *
     * @returns {OdataRequestInBatch} odataRequestInBatch
     * @package
     */
    getBatchInfo() {
        return this._batchInfo;
    }

    /**
     * Set batch info  with meta information (e.g. dependencies)
     *
     * @param {Object} batchInfo
     * @returns {PlainHttpRequest}
     * @package
     */
    setBatchInfo(batchInfo) {
        this._batchInfo = batchInfo;
        return this;
    }
}

module.exports = PlainHttpRequest;
