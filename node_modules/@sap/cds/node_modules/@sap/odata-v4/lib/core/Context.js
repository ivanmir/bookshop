'use strict';

const moduleCache = require('../ModuleCache');
const LoggerFacade = require('../logging/LoggerFacade');

/**
 * The main odata context. This context will be injected in most application components.
 */
class Context {

    /**
     * Creates in instance of Context. Furthermore build internal request/response wrapper.
     *
     * @param {Object} request - The incoming request object.
     * @param {Object} response - The outgoing response object.
     * @param {Service} service - The Odata service
     * @param {Function} serviceResolutionFn - Function to resolve the service name in the request URL. It must return an object with the 'base' and 'path' parts of the input URL.
     */
    constructor(request, response, service, serviceResolutionFn) {
        const OdataRequest = moduleCache.lookup('OdataRequest');
        const OdataResponse = moduleCache.lookup('OdataResponse');

        this._service = service;

        this._request = new OdataRequest(request, serviceResolutionFn);
        this._response = new OdataResponse(response);

        this._performanceMonitor = null;
    }

    /**
     * Sets logging information
     *
     * @param {LoggerFacade|Logger} logger
     * @param {Function} formatter Function used to format each log entry before the logger is called
     * @param {string} id Id of the logger
     * @returns {Context}
     */
    setLogger(logger, formatter, id) {
        if (logger instanceof LoggerFacade) {
            this._loggerFacade = logger;
        } else {
            this._loggerFacade = new LoggerFacade(logger, id).setFormatter(formatter);
        }
        this.getRequest().setLogger(this._loggerFacade);
        this.getResponse().setLogger(this._loggerFacade);
        return this;
    }

    /**
     * Returns the logger facade
     *
     * @returns {LoggerFacade}
     */
    getLogger() {
        return this._loggerFacade;
    }

    /**
     * Sets the performance monitor.
     *
     * @param {PerformanceMonitor} performanceMonitor The performance monitor
     * @returns {Context} This instance of context
     */
    setPerformanceMonitor(performanceMonitor) {
        this._performanceMonitor = performanceMonitor;
        return this;
    }

    /**
     * Returns the performance monitor.
     *
     * @returns {PerformanceMonitor} The performance monitor
     */
    getPerformanceMonitor() {
        return this._performanceMonitor;
    }

    /**
     * Returns the request.
     *
     * @returns {OdataRequest} The request.
     */
    getRequest() {
        return this._request;
    }

    /**
     * Returns the response.
     *
     * @returns {OdataResponse} The response.
     */
    getResponse() {
        return this._response;
    }

    /**
     * Returns the service instance
     * @returns {Service}
     */
    getService() {
        return this._service;
    }
}

module.exports = Context;
