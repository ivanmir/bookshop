'use strict';

const AbstractCachingStrategy = require('./AbstractCachingStrategy');
const CACHE_LIMIT_KB = 10240; // 10 Megabyte cache limit per mimeType

class LeastRecentlyUsedStrategy extends AbstractCachingStrategy {
    /**
     * @override
     */
    exceedsBoundary(cacheEntries) {
        const totalCacheSize = Array.from(cacheEntries.values())
            .reduce((size, cacheEntry) => size + cacheEntry.size, 0);
        return totalCacheSize > CACHE_LIMIT_KB;
    }

    /**
     * @override
     */
    invalidateItem(cacheEntries) {
        let oldestTime = Date.now();
        let oldestKey;
        for (const [key, value] of Array.from(cacheEntries)) {
            if (value.time < oldestTime) {
                oldestKey = key;
                oldestTime = value.time;
            }
        }
        return oldestKey;
    }
}

module.exports = LeastRecentlyUsedStrategy;
