const _valOf = (user) => {
  return () => {
    return user.id
  }
}

const _is = (user, attr) => {
  return (role) => {
    if (role === 'any') {
      return true
    }

    if (role === 'authenticated-user') {
      return attr.scopes.includes('openid')
    }

    const scopes = attr.scopes || []

    for (const scope of scopes) {
      if (role === scope || `${attr.xsappname}.${role}` === scope) {
        return true
      }
    }

    return false
  }
}

const _has = (user) => {
  return (roles) => {
    return !roles.some((role) => (!user.is(role)))
  }
}

const _extendUser = (context) => {
  if (context._.req && context._.req.authInfo) {
    context.attr = context._.req.authInfo
  }

  context.user.valueOf = _valOf(context.user)
  context.user.toString = _valOf(context.user)
  context.user.is = _is(context.user, context.attr)
  context.user.has = _has(context.user)
}

const _ensureUserAndAuth = (context) => {
  if (context._.req && context._.req.user) {
    context.user = context._.req.user
  }

  if (!context.user) {
    context.user = {
      id: 'anonymous'
    }
  }

  if (!context.attr) {
    context.attr = {
      scopes: []
    }
  }
}

const beforeAll = (context) => {
  _ensureUserAndAuth(context)
  _extendUser(context)
}

module.exports = beforeAll
