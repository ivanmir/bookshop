const notFound = require('./notFound')
const cds = require('../../cds')
const {getError} = require('../../errors')
const {generateUUID} = require('@sap/cds-ql')
const {getCompositionTree} = require('../utils/compositionTree')
const {getServiceNamespace, getEntityName, getDraftName, getSubCQNs} = require('../utils/draftUtils')
const {DB_CONNECTION_MISSING} = require('../utils/constants')

const _getDraftColumns = draftUUID => ({
  IsActiveEntity: false,
  HasDraftEntity: false,
  HasActiveEntity: true,
  DraftAdministrativeData_DraftUUID: draftUUID
})

const _setStatusCodeAndHeader = (response, keys) => {
  response.setStatusCode(201)

  const keysString = Object.keys(keys)
    .map(key => `${key}=${keys[key]}`)
    .join(',')
  response.setHeader(
    'location',
    `EntitySet(${keysString},IsActiveEntity=false)`
  )
}

const _getAdminData = ({user}, draftUUID, time) => {
  const currentUser = user ? user.id : null
  return {
    DraftUUID: draftUUID,
    CreationDateTime: time,
    CreatedByUser: currentUser,
    LastChangeDateTime: time,
    LastChangedByUser: currentUser,
    DraftIsCreatedByMe: true,
    DraftIsProcessedByMe: true,
    InProcessByUser: currentUser
  }
}

const _getInsertAdminDataCQN = ({statements: {INSERT}, user}, draftUUID, time) => {
  return INSERT.into('DRAFT.DraftAdministrativeData').entries(
    _getAdminData({user}, draftUUID, time)
  )
}

/**
 * Generic Handler for draftEdit requests.
 * In case of success it returns the root draft entry.
 *
 * @param context - operation object, that provides error, continuation and other functions as well as information
 * regarding the current operation.
 * @alias module:handlers.onDraftEdit
 */
const onDraftEdit = definitions => context => {
  if (!context.run) {
    context.log.warn(DB_CONNECTION_MISSING)
    return Promise.reject(notFound(context))
  }

  if (context.data['IsActiveEntity'] !== 'true') {
    return Promise.reject(getError(400))
  }
  const rootWhere = Object.keys(
    cds.reflect(context.target).keys
  ).reduce((res, key) => {
    res[key] = context.data[key]
    return res
  }, {})

  let compositionTree
  try {
    compositionTree = getCompositionTree(definitions, context.target.source)
  } catch (error) {
    return Promise.reject(getError(400))
  }

  const rootCQN = context.statements.SELECT
    .from(context.target)
    .where(rootWhere)

  const subCQNs = getSubCQNs({
    definitions,
    context,
    rootCQN,
    compositionTree
  })

  const selectCQNs = [rootCQN, ...subCQNs.map(obj => obj.cqn)]

  return Promise.all(selectCQNs.map(CQN => context.run(CQN))).then(results => {
    if (!results[0].length) throw notFound(context)

    const serviceNamespace = getServiceNamespace(context.target.name)
    const rootDraftName = `${context.target.name}_drafts`

    return context
      .run(context.statements.SELECT.from(rootDraftName).where(rootWhere))
      .then(drafts => {
        if (drafts.length) throw getError(409)

        const time = new Date(Date.now()).toISOString()
        const draftUUID = generateUUID()
        const insertCQNs = [_getInsertAdminDataCQN(context, draftUUID, time)]

        for (const resultIndex in results) {
          const draftEntity = getDraftName(
            serviceNamespace,
            getEntityName(selectCQNs[resultIndex].SELECT.from.ref[0])
          )

          insertCQNs.push(
            context.statements.INSERT
              .into(draftEntity)
              .entries(
                results[resultIndex].map(entityResult =>
                  Object.assign({}, entityResult, _getDraftColumns(draftUUID))
                )
              )
          )
        }

        return Promise.all(insertCQNs.map(CQN => context.run(CQN))).then(() => {
          _setStatusCodeAndHeader(context._.odataRes, rootWhere)
          return Object.assign({}, results[0][0], {
            DraftAdministrativeData_DraftUUID: draftUUID,
            HasDraftEntity: false,
            HasActiveEntity: true,
            IsActiveEntity: false
          })
        })
      })
  })
}

module.exports = onDraftEdit
