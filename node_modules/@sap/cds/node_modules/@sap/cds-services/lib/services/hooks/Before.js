const Base = require('./Base')

/**
 * Class representation of before middleware.
 * @augments Base
 * @alias module:hooks.Before
 */
class Before extends Base {
  /**
   * Check if handlers are registered for event and entity. Execute all handlers that are registered,
   * with result being passed in as input parameter to the handler.
   *
   * Execute handlers (handler(request, response)) in given sequence.
   * Note that there are two scenarios: asynchronous handlers and synchronous handlers.
   * If handler has promise as return ensure sequence even though asynchrony.
   *
   * The event returns a Promise, that resolves, when the last handler is done.
   *
   * @param {string} event - name of the event like READ, UPDATE, ...
   * @param {Object} context - Contains request information and utility events like .send(), .error(), ...
   * @param {Object} context.target - the unreflected entity
   * @returns {Promise}
   */
  executeHandlerIfListed (event, context) {
    let promiseChain = Promise.resolve()

    for (const entry of this._handlers) {
      if (this._match(event, context, entry)) {
        promiseChain = this._extendPromiseChainWithHandler(promiseChain, entry.handler, context)
      }
    }

    if (this._isTransactionEvent(event)) {
      return promiseChain
    }

    return promiseChain
      .then(() => {
        return this._handleErrors(context)
      })
  }

  _extendPromiseChainWithHandler (promiseChain, handler, context) {
    return promiseChain.then(() => {
      const promise = handler(context)
      return (promise && promise.then) ? promise : Promise.resolve()
    })
  }
}

module.exports = Before
