const cds = require('../../cds')
const {generateUUID} = require('@sap/cds-ql')
const notFound = require('./notFound')
const {getError} = require('../../errors')
const {getParent, getPartnerElement, isNavigationToMany} = require('../utils/compositionTree')
const {DB_CONNECTION_MISSING} = require('../utils/constants')

const _addKeysToData = (data, keys) => {
  if (!keys) {
    return
  }

  for (const key of Object.keys(keys)) {
    if (keys[key].type === 'cds.UUID') {
      data[key] = generateUUID()
    }
  }
}

const _getDraftEntityName = name => `${name}_drafts`

const _getSelectParentCQN = ({statements}, parent) => {
  const draftName = _getDraftEntityName(parent.entityName)

  return statements.SELECT.from(`${draftName}`, ['DraftUUID', 'CreatedByUser', 'InProcessByUser'])
    .join('DRAFT.DraftAdministrativeData').on({ref: ['DraftAdministrativeData_DraftUUID']}, `=`, `"DRAFT.DraftAdministrativeData"."DraftUUID"`)
    .where(parent.keyName, parent.keyValue)
}

const _validate = (result, context) => {
  if (result.length === 0) throw notFound(context)

  if (result[0].CreatedByUser !== context.user.id || result[0].InProcessByUser !== context.user.id) {
    throw getError(403, 'Locked by another user')
  }
}

const _getUpdateDraftAdminCQN = ({statements, user}, draftUUID) => {
  return statements.UPDATE('DRAFT.DraftAdministrativeData')
    .set({
      InProcessByUser: user.id,
      LastChangedByUser: user.id,
      LastChangeDateTime: new Date(Date.now()).toISOString()
    })
    .where({DraftUUID: draftUUID})
}

const _getInsertDraftAdminCQN = ({statements, user}, uuid) => {
  const time = new Date(Date.now()).toISOString()

  return statements.INSERT.into('DRAFT.DraftAdministrativeData').entries({
    DraftUUID: uuid,
    CreationDateTime: time,
    CreatedByUser: user.id,
    LastChangeDateTime: time,
    LastChangedByUser: user.id,
    DraftIsCreatedByMe: true,
    DraftIsProcessedByMe: true,
    InProcessByUser: user.id
  })
}

const _getInsertDataCQN = (context, draftUUID, parent) => {
  const draftName = _getDraftEntityName(context.target.name)

  const insertData = context.statements.INSERT.into(draftName)
    .entries(context.query.INSERT.entries[0]) // entries is always set because there are no entities without keys

  context.data.IsActiveEntity = false
  context.data.HasDraftEntity = false
  context.data.HasActiveEntity = false
  context.data.DraftAdministrativeData_DraftUUID = draftUUID

  if (parent) {
    context.data[`${getPartnerElement(context)}_${parent.keyName}`] = parent.keyValue
  }

  return insertData
}
/**
 * Generic Handler for CREATE requests.
 * In case of success it returns the created entry.
 *
 * @param service
 * @alias module:handlers.onCreateDraft
 */
const onCreateDraft = service => context => {
  _addKeysToData(context.data, cds.reflect(context.target).keys)

  if (!context.run) {
    context.log.warn(DB_CONNECTION_MISSING)
    return Promise.resolve(context.data)
  }

  if (isNavigationToMany(context)) {
    const parent = getParent(service, context)

    if (parent.IsActiveEntity === 'false') {
      return context.run(_getSelectParentCQN(context, parent))
        .then((result) => {
          _validate(result, context)

          const updateAdminData = _getUpdateDraftAdminCQN(context, result[0].DraftUUID)
          const insertData = _getInsertDataCQN(context, result[0].DraftUUID, parent)

          return Promise.all([context.run(updateAdminData), context.run(insertData)])
            .then(() => {
              return context.data
            })
        })
    }

    // parent entity is active
    return Promise.reject(notFound(context))
  }

  const uuid = generateUUID()

  const insertAdminData = _getInsertDraftAdminCQN(context, uuid)
  const insertData = _getInsertDataCQN(context, uuid)

  return Promise.all([context.run(insertAdminData), context.run(insertData)])
    .then(() => {
      return context.data
    })
}

module.exports = onCreateDraft
