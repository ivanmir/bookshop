const {builtin: {types}} = require('../../cds')

const _buildColumn = (name, type, key, annotations) => {
  const column = Object.assign({name: name, type: type}, annotations)
  if (key) {
    column.key = true
  }
  return column
}

const _annotations = (element) => {
  const annotations = {}

  for (const key of Object.keys(element)) {
    if (key.startsWith('@')) {
      annotations[key] = element[key]
    }
  }

  return annotations
}

const _getFinalType = (definitions, type, parentAnnotations) => {
  if (types[type] || !definitions[type]) {
    return {type: type, annotations: parentAnnotations}
  }

  return _getFinalType(definitions, definitions[type].type, Object.assign(_annotations(definitions[type]), parentAnnotations))
}

/**
 * This method gets all columns for an entity.
 * It includes the generated foreign keys from managed associations, structured elements and complex and custom types.
 * As well, it provides the annotations starting with '@' for each column.
 *
 * @param reflected - the reflected model
 * @param entity - the csn entity
 * @param prefix - the name prefix from parent element
 * @param parentAnnotations - the collected annotations from parent element
 * @returns {Array} - array of columns
 */
const getColumns = (reflected, entity, prefix, parentAnnotations = {}) => {
  let columns = []
  for (const key of Object.keys(entity.elements)) {
    const element = entity.elements[key]

    // prefix is used in complex types and struct elements
    const name = (prefix) ? `${prefix}_${element.name}` : element.name

    const {type, annotations} = _getFinalType(reflected.definitions, element.type, Object.assign(_annotations(element), parentAnnotations))

    if (type === 'cds.Composition') {
      continue
    }

    if (type !== 'cds.Association' && types[type]) {
      // simple column
      columns.push(_buildColumn(name, type, element.key, annotations))
    } else if (type === 'cds.Association' && element.foreignKeys) {
      // managed association
      Object.keys(element.foreignKeys).forEach((key) => {
        columns.push(_buildColumn(`${name}_${key}`, reflected.definitions[element.target].elements[key].type, element.key, annotations))
      })
    } else if (element.elements) {
      // structured elements
      columns.push(...getColumns(reflected, element, name, annotations))
    } else if (reflected.definitions[element.type] && reflected.definitions[element.type].elements) {
      // handle complex type
      columns.push(...getColumns(reflected, reflected.definitions[element.type], name, annotations))
    }
  }

  return columns
}

module.exports = getColumns
