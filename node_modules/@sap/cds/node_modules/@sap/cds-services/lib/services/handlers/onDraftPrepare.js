const notFound = require('./notFound')
const cds = require('../../cds')
const {getError} = require('../../errors')
const {DB_CONNECTION_MISSING} = require('../utils/constants')

const DRAFT_COLUMNS = [
  {
    ref: ['IsActiveEntity'],
    cast: {type: 'cds.Boolean'}
  }, {
    ref: ['HasActiveEntity'],
    cast: {type: 'cds.Boolean'}
  },
  {
    ref: ['HasDraftEntity'],
    cast: {type: 'cds.Boolean'}
  },
  'DraftAdministrativeData_DraftUUID'
]

/**
 * Generic Handler for PreparationAction requests.
 * In case of success it returns the prepared draft entry.
 *
 * @param context - operation object, that provides error, continuation and other functions as well as information
 * regarding the current operation.
 * @alias module:handlers.onDraftPrepare
 */
const onDraftPrepare = (context) => {
  if (!context.run) {
    context.log.warn(DB_CONNECTION_MISSING)
    return Promise.reject(notFound(context))
  }

  if (context.data['IsActiveEntity'] !== 'false') {
    return Promise.reject(getError(400))
  }

  const keys = Object.keys(cds.reflect(context.target).keys).reduce((res, key) => {
    res[key] = context.data[key]
    return res
  }, {})
  const columns = ['*', ...DRAFT_COLUMNS]
  const select = context.statements.SELECT.from(`${context.target.name}_drafts`)
    .columns(columns)
    .where(keys)

  return context.run(select)
    .then((result) => {
      if (result.length === 0) {
        throw notFound(context)
      }

      return result[0]
    })
}

module.exports = onDraftPrepare
