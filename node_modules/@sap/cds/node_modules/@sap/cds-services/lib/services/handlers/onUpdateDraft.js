const notFound = require('./notFound')
const {getError} = require('../../errors')
const {getUpdateDraftAdminCQN} = require('../utils/draftUtils')
const {DB_CONNECTION_MISSING} = require('../utils/constants')

const DRAFT_COLUMNS = [
  {
    ref: ['IsActiveEntity'],
    cast: {type: 'cds.Boolean'}
  }, {
    ref: ['HasActiveEntity'],
    cast: {type: 'cds.Boolean'}
  },
  {
    ref: ['HasDraftEntity'],
    cast: {type: 'cds.Boolean'}
  },
  { ref: ['DraftAdministrativeData_DraftUUID'] }
]

const _getDraftEntityName = name => `${name}_drafts`

const _getSelectCQN = ({query, statements, target: {name}}) => {
  const draftName = _getDraftEntityName(name)

  return statements.SELECT.from(draftName)
    .columns('*', ...DRAFT_COLUMNS, {
      ref: ['InProcessByUser']
    })
    .join('DRAFT.DraftAdministrativeData')
    .on({ref: [draftName, 'DraftAdministrativeData_DraftUUID']}, '=',
      {ref: ['DRAFT.DraftAdministrativeData', 'DraftUUID']})
    .where(query.UPDATE.where)
}

const _getUpdateDraftCQN = ({query, statements, target: {name}}) => {
  const set = {}
  for (const entry of Object.keys(query.UPDATE.data)) {
    set[entry] = query.UPDATE.data[entry].val
  }
  if (set.IsActiveEntity) set.IsActiveEntity = false

  return statements.UPDATE(_getDraftEntityName(name))
    .set(set).where(query.UPDATE.where)
}

const _deleteDraftAdminProperties = oldData => {
  for (const toBeDeletedProperty of ['DraftIsCreatedByMe', 'DraftIsProcessedByMe', 'InProcessByUser',
    'LastChangeDateTime', 'LastChangedByUser', 'CreatedByUser', 'CreationDateTime', 'DraftUUID']) {
    delete oldData[toBeDeletedProperty]
  }
}

/**
 * Generic Handler for UPDATE requests in the context of draft.
 * In case of success it returns the updated entry.
 * If the entry to be updated does not exist, it rejects with error to return a 404.
 * If a draft is already in process of another user it rejects with 403.
 *
 * @param context - operation object, that provides error, continuation and other functions as well as information
 * regarding the current operation.
 * @alias module:handlers.onUpdate
 */
const onUpdateDraft = context => {
  if (!context.run) {
    context.log.warn(DB_CONNECTION_MISSING)
    return Promise.resolve(context.query.UPDATE.data)
  }

  return context.run(_getSelectCQN(context))
    .then((result) => {
      if (result.length === 0) {
        throw notFound(context)
      }

      // Potential timeout scenario supported
      if (result[0].InProcessByUser && result[0].InProcessByUser !== context.user.id) {
        return context.reject(getError(403))
      }

      _deleteDraftAdminProperties(result[0])
      context._oldData = result[0]

      const updateDraftCQN = _getUpdateDraftCQN(context)
      const updateDraftAdminCQN = getUpdateDraftAdminCQN(context,
        context._oldData.DraftAdministrativeData_DraftUUID)

      const setData = Object.keys(context.query.UPDATE.data).reduce((res, curr) => {
        res[curr] = curr === 'IsActiveEntity' ? false : context.query.UPDATE.data[curr].val
        return res
      }, {})

      const returnedData = context.query.UPDATE.data
        ? Object.assign({}, context._oldData, setData)
        : Object.assign({}, context._oldData)

      return Promise.all([context.run(updateDraftCQN), context.run(updateDraftAdminCQN)])
        .then(() => returnedData)
    })
}

module.exports = onUpdateDraft
