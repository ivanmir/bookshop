const {getError} = require('../../errors')
const getClientIpFromRequest = require('../../services/utils/clientIpFromRequest')

const _getScopes = (req) => {
  if (!req.authInfo) {
    req.authInfo = {
      scopes: ['any']
    }
  }

  if (!req.authInfo.scopes) {
    req.authInfo.scopes = ['any']
  } else if (!req.authInfo.scopes.includes('any')) {
    req.authInfo.scopes.push('any')
  }

  if (req.authInfo.scopes.includes('openid') && !req.authInfo.scopes.includes('authenticated-user')) {
    req.authInfo.scopes.push('authenticated-user')
  }

  return req.authInfo.scopes
}

const _auditLog = (auditLogger, req) => {
  if (req.authInfo.identityZone) {
    auditLogger.logMissingPermissions({user: req.user ? req.user.id : 'anonymous', ip: getClientIpFromRequest(req), tenant: req.authInfo.identityZone})
  } else {
    auditLogger.logMissingPermissions({user: req.user ? req.user.id : 'anonymous', ip: getClientIpFromRequest(req)})
  }
}

/**
 * Get generic authorization handler on service level.
 * The handler to be registered as an express middleware handler after the proxy API is generated.
 *
 * @param service
 * @param auditLogger - the audit logger object
 * @returns {function(*, *, *)}
 *
 */
const getAuthServiceHandler = (service, auditLogger) => {
  const requires = service['@requires']

  if (typeof requires === 'string') {
    return (req, res, next) => {
      if (!_getScopes(req).includes(requires)) {
        _auditLog(auditLogger, req)
        next(getError(403))
        return
      }

      next()
    }
  }

  if (Array.isArray(requires)) {
    return (req, res, next) => {
      const scopes = _getScopes(req)

      if (!requires.some((val) => scopes.includes(val))) {
        _auditLog(auditLogger, req)
        next(getError(403))
        return
      }

      next()
    }
  }

  return (req, res, next) => {
    next()
  }
}

module.exports = getAuthServiceHandler
