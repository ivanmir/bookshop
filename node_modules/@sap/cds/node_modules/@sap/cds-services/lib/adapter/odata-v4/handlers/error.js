const _isStandardError = (err) => {
  return err instanceof TypeError || err instanceof ReferenceError || err instanceof SyntaxError || err instanceof RangeError || err instanceof URIError
}

/**
 * Custom error handler.
 * Crashes the node instance, if not deactivated.
 * @param {Boolean} crashOnError
 * @param crashOnError
 * @return {Function}
 */
const getErrorHandler = (crashOnError = true) => {
  return (req, res, next, err) => {
    if (_isStandardError(err) && crashOnError) {
      // Throwing async will circumvent the odata-v4 catch and crash the Node.js instance.
      setImmediate(() => {
        throw err
      })

      return
    }

    next(null, err)
  }
}

module.exports = getErrorHandler
