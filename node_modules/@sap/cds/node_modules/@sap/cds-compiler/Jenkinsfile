#!/usr/bin/env groovy

@Library(['piper-lib']) _

import com.sap.icd.jenkins.Utils

try {
    // pull request voting
    if (env.BRANCH_NAME == 'jenkins') {
        if (params.RELEASE_BUILD == 'TRUE'){
        } else {
            stage('Master Build') {
                lock(resource: "${env.JOB_NAME}/10", inversePrecedence: true) {
                    milestone 10
                    node('master') {
                        deleteDir()
                        checkout scm

                        setupPipelineEnvironment script: this, storeGithubStatistics: true

                        measureDuration(script: this, measurementName: 'build_duration_master') {
                            globalPipelineEnvironment.setArtifactVersion(getNpmVersion())
                            /* optimized out with the subsequent docker run
                            executeDocker(dockerImage: 'docker.wdf.sap.corp:50000/node:6', dockerWorkspace: '/home/node') {
                                sh "node --version"
                                sh "npm config set registry=http://nexus.wdf.sap.corp:8081/nexus/content/groups/build.releases.npm"
                                sh "npm config list"
                                sh "npm set progress=false && npm install && npm run download"
                            }
                            */
                            executeDocker(dockerImage: 'docker.wdf.sap.corp:50000/java:8', dockerWorkspace: '/home/node') {
                                def rootdir = sh(script: "pwd", returnStdout: true).trim()
                                def outdir=rootdir+"/lib/gen"
                                def jarfile=rootdir+"/tmp/antlr4-4.7.1-complete.jar"
                                def url = "http://nexus.wdf.sap.corp:8081/nexus/content/repositories/build.releases/org/antlr/antlr4/4.7.1/antlr4-4.7.1-complete.jar"

                                sh "mkdir $rootdir/tmp"
                                sh "wget -O $jarfile $url"

                                def cmd="cd "+rootdir+"/lib/language && " + 'java -cp '+jarfile+' -Xmx500M org.antlr.v4.Tool -no-listener -no-visitor -o '+outdir+' -Dlanguage=JavaScript language.g4'
                                def ret = sh(script: cmd, returnStdout: true)
                                println ret

                                cmd="cd "+rootdir+"/lib/json/parse && "+'java -cp '+jarfile+' -Xmx500M org.antlr.v4.Tool -no-listener -no-visitor -o '+outdir+' -Dlanguage=JavaScript JSON.g4'
                                ret = sh(script: cmd, returnStdout: true)
                                println ret
                            }
                            executeDocker(dockerImage: 'docker.wdf.sap.corp:50000/node:6', dockerWorkspace: '/home/node') {
                                sh "node --version"
                                sh "npm config set registry=http://nexus.wdf.sap.corp:8081/nexus/content/groups/build.releases.npm"
                                sh "npm config list"
                                sh "npm set progress=false && npm install"
                                sh "node scripts/genGrammarChecksum.js"
                                sh "npm set progress=false && npm test"
                                sh "npm set progress=false && npm run coverage"
                                sh "node scripts/fixLCOVinfo.js"
                            }
                            stash name: "codecov-report", includes: "coverage/lcov.info"
                        } // duration
                    }//node
                }//lock
            }//stage
            stage('SonarQube scan') {
                lock(resource: "${env.JOB_NAME}/30", inversePrecedence: true) {
                    milestone 30
                    node{
                        deleteDir()
                        checkout scm
                        setVersionAndDependencies()
                        def utils = new Utils()
                        def gitUrl = utils.getGitRemoteUrl()
                        def org = utils.getFolderFromGitUrl(gitUrl)
                        def repo = utils.getRepositoryFromGitUrl(gitUrl)
                        def sonarFullName = org + ':' + repo
                        unstash "codecov-report"
                        withSonarQubeEnv('sonarci.wdf.sap.corp') {
                            def scannerHome = tool 'SonarQube Scanner 3.0';
                            def version = getNpmVersion() + '-post';
                            sh "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=$sonarFullName -Dsonar.projectVersion=$version -Dsonar.javascript.lcov.reportPaths=./coverage/lcov.info"
                        }
                    }
                }
            }//stage sonar
            stage('SourceClear scan') {
                lock(resource: "${env.JOB_NAME}/40", inversePrecedence: true) {
                    milestone 40
                    node {
                        deleteDir()
                        checkout scm
                        executeSourceclearScan script: this, scanType: 'npm'
                    }
                }
            } // stage SourceClear

            stage('Security') {
                lock(resource: "${env.JOB_NAME}/50", inversePrecedence: true) {
                    milestone 50

                    node {
                        setupPipelineEnvironment script: this, storeGithubStatistics: true
                        deleteDir()
                        checkout scm

                        // Checkmarx
                        measureDuration(script: this, measurementName: 'checkmarx_duration') {
                            executeCheckmarxScan script: this, incremental: false
                        }

                        // open-source vulnerability
                        measureDuration(script: this, measurementName: 'opensourcevulnerability_duration') {
                            executeOpenSourceDependencyScan script: this, scanType: 'npm', sourceClear: true
                        }
                    }
                }
            } // stage Security

            stage('IPScan and PPMS') {
                lock(resource: "${env.JOB_NAME}/70", inversePrecedence: true) {
                    milestone 70
                    node {
                        deleteDir()
                        checkout scm

                        measureDuration (script: this, measurementName: 'whitesource_duration') {
                            executeWhitesourceScan script: this, scanType: 'npm'
                        }
                    }
                }
            }


        } // release build ?
    } // branch
} catch (Throwable err) { // catch all exceptions
    node {
        globalPipelineEnvironment.addError(this, err)
        throw err
    }
} finally {
    node {
        writeInflux script: this
        if (env.BRANCH_NAME == 'jenkins') {
            sendNotificationMail script: this, notificationRecipients: 'vladislav.leonkev@sap.com'
        } else {
            sendNotificationMail script: this, notificationRecipients: 'vladislav.leonkev@sap.com'
        }
        
        // cleanup workspace
        step([$class: 'WsCleanup'])
    }
}

def setWhiteSourceVersion(version) {
    def whiteSourceJson = readJSON file: './whitesource.config.json'
    whiteSourceJson.projectVer = new String(version)
    writeJSON file: './whitesource.config.json', json: whiteSourceJson, pretty: 2
}

def setNpmVersion(version, filePath) {
    def packageJson = readJSON file: filePath
    packageJson.version = new String(version)
    writeJSON file: filePath, json: packageJson, pretty: 2
}

def getNpmVersion() {
    def packageJson = readJSON file: './package.json'
    echo "getNpmVersion: ${packageJson.version}"
    return packageJson.version
}

def removePropertiesFromDependencies(dependency) {
    dependency.each{ k, v -> 
        if (k == 'from' || k == 'resolved' || k == 'integrity') {
            dependency.remove(k)
        }
        
        if (k == 'dependencies') {
            dependency[k] = removePropertiesFromDependencies(v)
        }
    }
    return dependency
}

def setVersionAndDependencies() {
    def utils = new Utils()
    def commitId = utils.getGitCommitId()
    def newVersion = getNpmVersion().replace("-SNAPSHOT", "")
    
    // if version is passed as argument
    def requestedVersionToBeBuilt = params[params.ARTIFACT_NAME]
    if (requestedVersionToBeBuilt != null) {
        newVersion = requestedVersionToBeBuilt
    }
    
    // save version so we can use it in the release pipeline to get the just built version of a module
    globalPipelineEnvironment.setArtifactVersion(newVersion)
    env.RESULT_VERSION = newVersion
}

def setDependencyVersions () {
    def packageJson = readJSON file: './package.json'
    if (packageJson.dependencies != null) {
        params.each{ k, v -> 
            if (packageJson.dependencies[getArtifactName(k)] != null) {
                packageJson.dependencies[getArtifactName(k)] = v
            }
        }
    }
    
    if (packageJson.devDependencies != null) {
        params.each{ k, v -> 
            if (packageJson.devDependencies[getArtifactName(k)] != null) {
                packageJson.devDependencies[getArtifactName(k)] = v
            }
        }
    }
    writeJSON file: './package.json', json: packageJson
}

def getArtifactName (key) {
    return "@sap/${key.replace('_','-')}"
}
