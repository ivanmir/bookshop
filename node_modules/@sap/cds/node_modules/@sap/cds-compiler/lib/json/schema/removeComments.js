// this module removes single- and multi-line comments out of a text
// can be used for JSON with comments

// states
const TEXT=0;
const FIRSTSLASH=1;
const SINGLE=2;
const MULTI=3;
const MULTIEND=4;
const NEXTTEXT=5;
const IGNORENEXTandTEXT=6;

// the parameter contains the text to strip
// returns the stripped text
function removeComments(s) {
  let r = "";
  let state=TEXT;
  for(let c=0;c<s.length;++c) {
    let ch = s[c];
    let ch1 = s[c+1];
    let lost="";
    if(state==TEXT) {
      if(ch==='/') state = FIRSTSLASH;
    } else if(state==FIRSTSLASH) {
      if(ch==='/') state = SINGLE; // started single line comment
      else if(ch==='*') state = MULTI; // started multi-line comment
      else {
        state=TEXT; // was single slash with following text
        lost+="/"; // restore lost slash
      }
    } else if(state==SINGLE) {
      if(ch==='\n') {
        state = TEXT; // linux: \n
      } else if(ch==='\r' && ch1==='\n') { // windows: \r\n
        state = IGNORENEXTandTEXT;
      } else if(ch==='\r' && ch1!=='\n') { // inconsistent: \r\n
        throw new Error("Fatal: single-line comment ending"); // ERROR
      }
    } else if(state==MULTI) {
      if(ch==='*' && ch1==='/') { // semi-end of multi-line
        state = MULTIEND;
      }
    } else if(state==MULTIEND) {
      if(ch==='/') {
        state = NEXTTEXT; // end of multi-line
      } else throw new Error("Fatal: multi-line comment"); // ERROR
    } else if(state===IGNORENEXTandTEXT) {
      state = NEXTTEXT;
    }
    //==========================
    r+=lost; // append lost data
    if(state===NEXTTEXT) state=TEXT;
    else if(state===TEXT) r+=ch;
  }
  return r;
}

module.exports = removeComments;