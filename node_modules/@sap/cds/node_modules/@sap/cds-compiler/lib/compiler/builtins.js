// The builtin artifacts of CDS

'use strict';

var core = {
  String: { parameters: ['length'] },
  LargeString: {},
  Binary: { parameters: ['length'] },
  LargeBinary: {},
  Decimal: { parameters: ['precision', 'scale'] },
  DecimalFloat: {},
  Integer64: {},
  Integer: {},
  Double: {},
  Date: {},
  Time: {},
  DateTime: {},
  Timestamp: {},
  Boolean: {},
  Association: {internal:true},
  Composition: {internal:true},
  UUID: {},
};

var hanaHana = {
  ALPHANUM: { parameters: ['length'] },
  SMALLINT: {},
  TINYINT: {},
  SMALLDECIMAL: {},
  REAL: {},
  CHAR: { parameters: ['length'] },
  NCHAR: { parameters: ['length'] },
  VARCHAR: { parameters: ['length'] },
  CLOB: {},
  BINARY: { parameters: ['length'] },
  ST_POINT: { parameters: [ {name: 'length', literal: 'number', val: 0} ]},
  ST_GEOMETRY: { parameters: [ {name: 'length', literal: 'number', val: 0} ] }
}

var hana = {
  BinaryFloat: {},
  LocalDate: {},
  LocalTime: {},
  UTCDateTime: {},
  UTCTimestamp: {},
  WithStructuredPrivilegeCheck: { kind: 'annotation' },
  hana: { kind: 'context' }
}

const magicVariables = {        // in SQL-92
  CURRENT_DATE: {},
  CURRENT_TIME: {},
  CURRENT_TIMESTAMP: {},
  CURRENT_USER: {},
  SESSION_USER: {},
  // SQL-92: also SYSTEM_USER, just USER (is with parens in HANA SQL), VALUE
  '$user': {},                  // CDS-specific, not part of SQL
  '$now': {},                   // Dito
}

const magicVariables_hana = {
  CURRENT_CONNECTION: {},
  CURRENT_SCHEMA: {},
  CURRENT_TRANSACTION_ISOLATION_LEVEL: {},
  CURRENT_UTCDATE: {},
  CURRENT_UTCTIME: {},
  CURRENT_UTCTIMESTAMP: {},
  SYSUUID: {},
}

function initBuiltins( model ) {
  if (!model.options.hanaFlavor) {
    setMagicVariables( magicVariables );
    model.$builtins = env( core, 'cds.' );
  }
  else {
    setMagicVariables( Object.assign( {}, magicVariables, magicVariables_hana ) );
    let artifacts = env( Object.assign( {}, core, hana ), 'cds.', 'sap.cds::' );
    artifacts.hana.artifacts = env( hanaHana, 'hana.' );
    model.$builtins = artifacts;
  }

  function env( builtins, prefix, extraPrefix ) {
    var artifacts = Object.create(null);
    for (let name in builtins) {
      let absolute = prefix + name;
      let art = { kind: 'type', builtin: true, name: {absolute}, type: { absolute } };
      setProp( art.type, '_artifact', art );
      setProp( art, '_finalType', art );
      setProp( art, '_deps', [] );
      Object.assign( art, builtins[name] );
      if (!art.internal)
        artifacts[name] = art;
      setProp( model.definitions, absolute, art );
      if (extraPrefix)
        setProp( model.definitions, extraPrefix + name, art );
    }
    return artifacts;
  }

  function setMagicVariables( builtins ) {
    let artifacts = Object.create(null);
    for (let name in builtins) {
      // TODO: rename to $builtinFunction
      artifacts[name] = { kind: 'builtin', name: { action: name } };
    }
    model.$magicVariables = { kind: '$magicVariables', artifacts };
  }
}

// Like `obj.prop = value`, but not contained in JSON / CSN
function setProp ( obj, prop, value ) {
  Object.defineProperty( obj, prop, { value, configurable: true } ); // not enumerable!
  return value;
}

module.exports = initBuiltins;
