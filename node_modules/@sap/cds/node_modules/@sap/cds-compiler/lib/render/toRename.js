
"use strict";

const { CompilationError, hasErrors, sortMessages } = require('../base/messages');
const { mergeOptions, isAssociation, getTopLevelArtifactNameOf, getParentNameOf } = require('../model/modelUtils');

// Render the augmented CSN 'model' to SQL DDL statements renaming existing tables and their
// columns so that they match the result of "toHana" or "toSql" with the 'flat' option for names.
// Expects the naming convention of the existing tables to be either 'deep' or 'hdbcds' (default).
// The following options control what is actually generated:
//   options : {
//     toRename.names      :  existing names, either 'deep' or 'hdbcds' (default)
//   }
// Return a dictionary of top-level artifacts by their names, like this:
// { "foo" : "RENAME TABLE \"foo\" ...",
//   "bar::wiz" : "RENAME VIEW \"bar::wiz\" ..."
// }
function toRenameDdl(model, options) {
  // Merge options (arguments first, then model options and default)
  options = mergeOptions({toRename: {names: 'hdbcds'}}, model.options, options);
  let result = Object.create(null);

  // FIXME: Currently requires 'options.forHana', because it requires the 'forHana' transformations 
  if (!options.forHana) {
    throw new Error('toRenameDdl can currently only be used with HANA preprocessing');
  }

  // Render each artifact on its own
  for (let artifactName in model.definitions) {
    let sourceStr = renameTableAndColumns(model.definitions[artifactName]);

    if (sourceStr != '') {
      result[artifactName] = sourceStr;
    }
  }
  // Throw up if we have errors
  if (hasErrors(model.messages)) {
    throw new CompilationError(sortMessages(model.messages), model);
  }
  return result;

  // If 'art' is a non-view entity, generate SQL statements to rename the corresponding
  // table and its columns from the naming conventions given in 'options.toRename.name'
  // (either 'deep' or 'hdbcds') to 'flat'. In addition, drop any existing associations
  // from the columns (they would likely become invalid anyway).
  // Do not rename anything if the names are identical.
  function renameTableAndColumns(art) {
    let resultStr = '';
    if (art.kind == 'entity' && !art.source) {
      let beforeTableName = quoteSqlId(absoluteCdsName(art.name.absolute));
      let afterTableName = flatSqlId(art.name.absolute);

      if (beforeTableName != afterTableName) {
        resultStr += 'RENAME TABLE ' + beforeTableName + ' TO ' + afterTableName + ';\n';
      }

      resultStr += Object.keys(art.elements).map(name => {
        let e = art.elements[name];
        let result = '';

        let beforeColumnName = quoteSqlId(e.name.id);
        let afterColumnName = flatSqlId(e.name.id);

        if (!e._ignore) {
          if (isAssociation(e._finalType.type)) {
            result = 'ALTER TABLE ' + afterTableName + ' DROP ASSOCIATION ' + beforeColumnName + ';\n'
          }
          else if (beforeColumnName != afterColumnName) {
            result = 'RENAME COLUMN ' +  afterTableName + '.' + beforeColumnName + ' TO ' + afterColumnName + ';\n';
          }
        }
        return result;
      }).join('');
    }
    return resultStr;
  }

  // Return 'name' in the form of an absolute CDS name - for the 'hdbcds' naming convention,
  // this means converting '.' to '::' on the border between namespace and top-level artifact.
  // For all other naming conventions, this is a no-op.
  function absoluteCdsName(name) {
    if (options.toRename.names != 'hdbcds') {
      return name;
    }
    let topLevelName = getTopLevelArtifactNameOf(name, model);
    let namespaceName = getParentNameOf(topLevelName);
    if (namespaceName) {
      return `${namespaceName}::${name.substring(namespaceName.length + 1)}`;
    }
    return name;
  }

  // Return 'name' with appropriate "-quotes, also replacing '::' by '.' if 'options.toRename.names'
  // is 'deep'
  function quoteSqlId(name) {
    if (options.toRename.names == 'deep') {
      name = name.replace(/::/g, '.');
    }
    return '"' + name.replace(/"/g, '""') + '"';
  }

  // Return 'name' with appropriate "-quotes, also replacing '::' and '.' by '_'
  function flatSqlId(name) {
    return '"' + name.toUpperCase().replace(/(::|\.)/g, '_').replace(/"/g, '""') + '"';
  }
}

module.exports = {
  toRenameDdl,
};