'use strict';

// inverse of xmlParser

function jsToXml(obj, initialIndent=0) {
  let str = '<?xml version="1.0" encoding="utf-8"?>\n';

  if (Array.isArray(obj)) {
    for (let ae of obj) {
      toxml(ae, initialIndent);
    }
  }
  else {
    toxml(obj, initialIndent);
  }
  return str.trim();

  function indent(i) {
    return Array(i+1).join("  ");
  }

  function toxml(obj, depth) {
    // ignore empty collections
    if (obj["$kind"] == "Collection" && (!("$elements" in obj) || obj["$elements"].length==0)) {
      str += indent(depth) + "<" + obj["$kind"] + "/>\n";
      return;
    }

    str += indent(depth) + "<" + obj["$kind"]
    for (let a in obj) {
      if (a.charAt(0) != "$") {
        str += ' ' + a + '="' + obj[a] + '"';
      }
    }
    if (obj["$elements"] != undefined) {
      str += ">\n";
      for (let e of obj["$elements"]) {
        toxml(e, depth+1);
      }
      str += indent(depth) + "</" + obj["$kind"] + ">\n";
    }
    else if (obj["$value"] != undefined) {
      str += ">" + obj["$value"] + "</" + obj["$kind"] + ">\n";
    }
    else {
      str += "/>\n";
    }
  }
}

/**************************************************************************************************
  exports
**************************************************************************************************/

module.exports = { jsToXml };
