module.exports = Object.assign (_new, {
    options: ['--modules'],
    help:`
# SYNOPSIS

    *cds new* [<dir>] [<options>]

    Creates a new project in the given directory


# OPTIONS
    *--modules [<modules>]*

        A comma-separated list of the modules to be created
        Valid modules are app, srv, db

# EXAMPLES

   *cds* new project
   *cds* new project --modules app,db
   *cds* new project --modules app

`})


function _new (args, options) {
    const generator = requireDynamic('@sap/generator-cds', '^1')
    return generator.new(args, options)
}


function requireDynamic(name, version='latest') {
    if (global.__cds_bin) {
        // Add the global cds to the module resolve path.  Allows finding the module
        // even if we are in a project with a local cds installed.
        const path = require('path')
        module.paths.push(path.resolve(global.__cds_bin, '../node_modules'))
    }

    const installSpec = name + '@' + version
    try {
        return require(name)
    } catch (e) {
        console.log(`\n    This feature requires the module ${name} to be installed.\n` +
                    `    --> Running "npm install -g ${installSpec}"\n`)

        const { execSync } = require('child_process')
        try {
            execSync(`npm install -g ${installSpec}`, { shell: true, stdio: 'inherit' })
        } catch (e) {
            e.message = `Tried to run "npm install -g ${installSpec}" but failed.` +
                          `    --> Try to install ${installSpec} manually.`
            throw e
        }

        try {
            return require(name)
        } catch (e) {
            e.message = `Installed ${name} but still cannot resolve it.` +
                `    --> Try to install ${installSpec} manually.`
            throw e
        }
    }
}

/* eslint no-console:0 */
