const fs = require('../../../lib/utils/fs'), {path}=fs

/**
 * Build a Fiori app by copying the relevant edmx file from the srv build output
 * to localService. This is to support UI5 v2 mock server tests only.
 *
 * Note that this build requires respective java_srv builds to have been
 * executed before.
 */
module.exports = {

    category: 'app',
    dest: '${folder}/webapp',  clean: false, //NOSONAR
    folders: ['app/*/webapp', '*/webapp', 'app/*/fiori-ui.cds', '*/fiori-ui.cds'],
    map: path.dirname,

    build (options) {

        let models = this.resolve (options.folder)
        if (models)  return this.load(models) .then (m => {

            let o = Object.assign ({}, this.env.odata, options)
            let edmx = this.compile(m).to('edmx',o)
            let service = this.reflect(m).find (this.service)
            this.write (edmx) .to (`localService/metadata.xml`)

            const manifest_json = path.resolve (options.dest, 'manifest.json')
            if (fs.isfile (manifest_json)) return

            let manifest; try { manifest = require (manifest_json) }
            catch(e) { manifest = {"sap.app":{ dataSources:{ mainService:{}}}}}

            const main = _property (manifest, 'sap.app', 'dataSources', 'mainService')
            const entities = this.reflect(m).childrenOf(service)
            if (!main.settings)  main.settings = {}
            main.uri = `/odata/v2/${service.name}/${Object.keys(entities)[0]}`
            main.settings.localUri = `localService/metadata.xml`
            this.write(manifest) .to ('manifest.json')

        }); else {

            const manifest_json = path.resolve (options.folder, 'webapp/manifest.json')
            let manifest, srv; //= filled in below...
            try { manifest = require (manifest_json) } catch(e) {return}

            const main = _property (manifest, 'sap.app', 'dataSources', 'mainService')
            const localUri = _property (main, 'settings', 'localUri')
            const uri = _property (main, 'uri')
            const _src = /([^/]+)\/([^/?#]+)([?#].*)?$/.test(uri) && RegExp.$1+'.xml'
            const _dst = /([^/?#]+)([?#].*)?$/.test(localUri) && RegExp.$1
            if (!_src || !_dst)  return

            // if this is in a build all --> wait for srv builds to finish
            srv = this.all.filter (m => m.category === 'srv')
            if (srv.length)  srv = Promise.all (srv.map (s => s.built.then (()=>s)))

            // else, take output from recent srv builds if available
            else  srv = Promise.resolve ([...this.modules4 ('java-srv')])

            return srv.then (all => Promise.all (this.written). then (()=> {
                for (let each of all) {
                    let src = path.resolve (each.dest, _src);  if (!fs.isfile(src))  continue
                    let dst = path.resolve (options.dest, 'localService', _dst)
                    return this.written.push (fs.copy (src,dst,true).then (()=> dst))
                }
            }))

        }

    }

}


function _property (src, ...segments) {
    return segments.reduce((p,n)=> p&&p[n], src)
}
/* eslint no-console:off */