if (!require ('../../lib').env.simple_init)  return module.exports = require('../new')

module.exports = Object.assign (_init, {
    options: ['--template'],
    flags: ['--force'],
    shortcuts: ['-t', '-f'],
    help:`
# SYNOPSIS

    *cds init* [<dir>] [-f]

    Sets up a new project in the given directory.

`})

const { path, isfile, isdir, copy, writeFile } = require('../../lib/utils/fs')
const { promisify } = require('util')
const { spawn, exec } = require ('child_process')
const os = require ('os')
const _spawn = promisify (spawn)
const _exec = promisify (exec)
const _write = promisify (writeFile)


function _init ([dir],{ force, template='nutshell' }) {

    if (!force) {
        if (isfile(dir))  throw `A file named ${dir} already exists. Cannot create a new project here, sorry.`
        if (isdir(dir))  throw `A folder ${dir} already exists. Cannot create a new project here, sorry.`
    }

    console.log (`\nSetting up project at ${dir}...\n`)
    const write = (f,c) => _write (path.resolve(dir,f),c)
    const conf = require ('../../lib').env.simple_init || {}
    const useGlobalCds = conf ['use-global-cds']

    copy (path.join(__dirname, template), dir, 'mkdir')
    .then (()=> Promise.all ([
        update_package_json() .then (npm_install),
        git_init()
    ]))
    .catch (console.error)

    function update_package_json () {
        const package_json = path.resolve (dir,'package.json')
        const pj = Object.assign (require (package_json), {
            name: path.basename (dir),
            author: os.userInfo().username,
        })
        if (useGlobalCds)  delete pj.dependencies ['@sap/cds']
        return write ('package.json', JSON.stringify (pj, null, '  '))
    }

    function npm_install (){
        return _spawn (
            'npm', ['update', '--save'], {
                cwd:dir, stdio: ['ignore', process.stdout, process.stderr]
            }
        )
    }

    function git_init(){
        write ('.gitignore', `node_modules\n**/*.db\n`)
        if (os.platform() === 'darwin')  return _exec (
            'git init && git add . && git commit -m .', {
                cwd:dir
            }
        )
    }

}
/* eslint no-console:0 */