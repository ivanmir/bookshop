module.exports = Object.assign(deploy, {
  options: ['--to'],
  shortcuts: ['-2'],
  help: `
# SYNOPSIS

    *cds deploy* [ <model> ] [ -to <database> ]

    Deploys the given model to a database. If no model is given it looks up
    according configuration from _package.json_ or _.cdsrc.json_. Same for
    the database.

`})

function deploy ([model], {to:url}) {

  const cds = require('../lib/index')
  const db = cds.connect (url)
  const o = db.options || {}
  if (!model) model = o.model || cds.env.data.model || 'srv'
  else o.model = model

  db.deploy (model)
  .then (() => cds.disconnect())
  .catch (e => {
    if (!model && e.code === 'MODEL_NOT_FOUND') {
      throw new Error('Please specify a data model or configure one in package.json#cds.data.model')
    } else throw e
  })

  if (url)  registerDatasource (url, model)
}

function registerDatasource (url, model) { try {
  const package_json = require('path') .resolve ('package.json')
  const pj = require (package_json)
  if (pj.cds && pj.services && pj.services.db)  return
  const conf = (pj.cds || (pj.cds={})) .services || (pj.cds.services = {})
  conf.db = Object.assign({},conf.db, { url, model })
  const write = require('util').promisify (require('fs').writeFile)
  write (package_json, JSON.stringify(pj,null,'  ')).then (()=>
    console.log (' - updated package.json')
  )
} catch(e){/* ignore */}}

/* eslint no-console: off */