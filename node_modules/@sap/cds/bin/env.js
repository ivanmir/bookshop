module.exports = Object.assign(config, {
  options: [], shortcuts: [],
  help: `
# SYNOPSIS

    *cds env*
    *cds env* <ls | list> [<key>]
    *cds env* set <key> <value>
    *cds env* get <key>
    *cds env* src

# EXPLANATION

    Without any arguments, this will display the effective configuration in
    the current envorinment in JavaScript object format. <ls | list> displays
    it in .properties format.

    The other variants either get or set a single option or display the sources
    from which the effective config has been loaded.

`})

function config ([cmd, key, value], options={}) {
  const cds = require('../lib')
  const fn = commands[cmd] || (()=>{
    require('../bin/help')(['config'])
    throw new Error (`Don't understand '${cmd}' here...`)
  })
  fn (cds.env, key, value, options.logger || console)
}


const commands = {

  undefined: (all, key, value, logger) => logger.log (all),

  list (conf, _key, val, logger) {
    (function _list (o = _key ? conf.get(_key) : conf, key = _key || '') {
      if (typeof o === 'object') for (let p of Object.keys(o).sort()) {
        _list (o[p], (key ? key+'.' : '')+p)
      } else  logger.log (key, '=', o)
    })()
  },

  get (conf, key, val, logger) {
    logger.log (conf.get(key))
  },

  src (conf, key, val, logger) {
    logger.log()
    for (let each of [...conf._source].reverse())  logger.log (' ', each)
    logger.log()
  },

  set () {
    throw new Error ('cds config set is not yet implemented, sorry')
  },

}

commands.ls = commands.list
