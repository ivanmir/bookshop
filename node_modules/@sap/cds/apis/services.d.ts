import { ParsedQuery } from "./specs/CQN";
import { Definition } from "./specs/CSN";
import { DataSource } from "@sap/cds/apis/connect";
import { ReflectedDefinitions, ReflectedDefinition, reflected } from "./reflect";

export function serve (service : ServiceDefinition | string) : Fluent
interface Fluent {
	in (app: Express.Application) : this
	to (protocol: string) : this
	at (path: string) : this
	with (impl: ServiceImpl | string) : this
	then (next : () => void) : Promise<void>
	catch (handler : (err) => void) : Promise<void>
}

export const service : {
	impl: (impl: ServiceImpl) => typeof impl
}

export type ServiceDefinition = ReflectedDefinition

export interface ServiceProvider {
	entities : typeof reflected.entities
	on (op: Method, entity?: Target, handler?: RequestHandler) : this
	before (op: Method, entity?: Target, handler?: RequestHandler) : this
	after (op: Method, entity?: Target, handler?: ResultsHandler) : this
	reject (ops: CRUD | CRUD[], ...entity: Target[]) : this
	handle (query : ParsedQuery)
}

/**
 * A service implementation function.
 * @param entities - the current service's entity definitions
 * @param this - the current ServiceProvider
 */
export interface ServiceImpl {
	( this: ServiceProvider, entities: ReflectedDefinitions )
}

type Target = Definition
type Method = CRUD | TX | HTTP // | CustomOp
type CRUD = 'CREATE' | 'READ' | 'UPDATE' | 'DELETE'
type HTTP = 'GET' | 'PUT' | 'POST' | 'DELETE' | 'PATCH'
type TX = 'COMMIT' | 'ROLLBACK'
type CustomOp = string


interface RequestHandler {
	(cds : RequestContext) : Promise<any> | any | void
}
interface ResultsHandler {
	(results : any[])
	(each : any)
}

interface RequestContext extends DataSource {}