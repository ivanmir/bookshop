const ENV = '['+( process.env.NODE_ENV || process.env.CDS_ENV || 'dev' )+']'
const DEFAULTS = require.resolve ('./_defaults'), defaults = require(DEFAULTS)
const home = require('os').homedir()
const path = require('path')
const cached = {}

/**
 * Both a config inctance as well as factory for.
 */
const Config = [ class {

  constructor(){
    _clone (defaults, /*into:*/ this)
    Object.defineProperty (this, '_source', {value:[DEFAULTS]})
  }

  /**
   * @returns {Config}
   */
  in (cwd) { return cached[cwd] || (
    cached[cwd] = (new Config)
    .load (home, '.cdsrc')
    .load (cwd, '.cdsrc')
    .load (cwd, 'package.json', p => p.cds)
    .load ('$','CDS_CONF', JSON.parse)
  )}

  load (cwd, res, _conf=o=>o) {
    try {
      const env = cwd == '$' && (process.env[res] || '0')
      const src = env ? '$'+res : require.resolve (path.join(cwd, res))
      const conf = _conf (env || require (src))
      if (conf) {
        this._source.push (src)
        this.add (conf)
      }
    } catch (e) {
      if (e.code !== 'MODULE_NOT_FOUND')  throw e
    }
    return _fix (this)
  }

  add (_overlay, /*to:*/ conf=this) {
    let _profile = undefined
    for (let p in _overlay) {
      const v = _overlay[p]
      if (p[0] == '[') { if (p === ENV)  _profile = v }
      else if (Array.isArray(v))  conf[p] = (conf[p]||[]) .concat (v)
      else if (typeof v === 'object' && p in conf)  this.add (v, /*to:*/ conf[p])
      else conf[p] = v
    }
    if (_profile)  this.add (_profile, /*to:*/ conf)
    return conf
  }

  get (path='') {
    return path.split('.').reduce ((p,n)=> p && p[n], this)
  }

  for (conf) {
    return _fix ((new Config) .add (conf))
  }

} ][0] //> to make this a nameless class


function _clone (o, /*into*/ conf) {
  for (let p in o) {
    const v = o[p]
    conf[p] = ( typeof v === 'object' && !Array.isArray(v) )  ?  _clone(v,{})  :  v
  }
  return conf
}


function _fix (conf) {
  if (conf.build.new_csn)  conf.cdsv.new_csn = conf.build.new_csn
  if (conf.service.odata)  conf.odata = conf.service.odata
  if (conf.data && conf.data.sql_mapping)  conf.sql_mapping = conf.data.sql_mapping
  else (conf.data || (conf.data={})) .sql_mapping = conf.sql_mapping
  return conf
}

module.exports = (new Config) .in (process.cwd())