module.exports = cds_connect

const cds = require ('../index')
const conf = cds.env.services || {}
const ql = require ('@sap/cds-ql'); ql.inject (cds)
const _cached = {}
let singleton

function cds_connect (datasource, _options) {

  if (!datasource || typeof datasource === 'object') [ datasource, _options ] = [ 'db', datasource||{} ]
  if (datasource.startsWith('local:')) {
    return cds.service.client.for (datasource.slice(6))
  }


  const o = Object.assign ({}, conf[datasource], _options)

  function _unfold (url) {
    if (url) {
      const [driver,tail] = url.split(':')
      if (tail) {
        o.driver = driver
        o.url = tail
        return true
      }
    }
  }
  const isUnfolded = _unfold (datasource)

  if (singleton)  return singleton
  if (_cached[datasource])  return _cached[datasource]

  const ds = _cached[datasource] = ql.connect.connect (isUnfolded ? o : null) // options=null --> let ql.connect apply config from package.json etc.
  // Prepare the effective options by the ones configured for the datasource
  // overlayed with the ones provided programmatically
  ds.options = o

  if (!cds.session || datasource == 'default' || o.default || o.primary) {
    // Decorate cds to serve as a shortcut to the primary session
    Object.defineProperties (cds, {
      run: {configurable: true, value: (...a) => ds.run(...a)},
      foreach: {configurable: true, value: (...a) => ds.foreach(...a)},
      deploy: {configurable: true, value: (...a) => ds.deploy(...a)},
      model: {configurable: true, get: () => ds.model},
      entities: {configurable: true, get: () => ds.model.entities},
      disconnect: {configurable: true, value: (...a) => ds.disconnect(...a)}
    })
    cds.session = ds
    cds.options = o
  }

  singleton = ds;  return cds
  // return !options ? cds : ds
}

require('@sap/cds-ql/lib/statements/Update').prototype.valueOf =  function(){
  return `UPDATE ${_2sql (this.UPDATE.entity)} `
}

function _2sql (name) {
  const sqlm = cds.env.sql_mapping || cds.env.data.sql_mapping
  if (sqlm === 'quoted' || sqlm === 'hdbcds')  return `"${name}"`
  else  return name.replace (/\./g,'_')
}


// for repl...
Object.defineProperty (ql.statements.BaseStatement, '_isQuery', {value:true})

// SELECT, INSERT, UPDATE, DELETE, CREATE, DROP as globals
Object.assign (global, cds_connect.ql = ql.statements)
cds_connect.to = cds_connect
