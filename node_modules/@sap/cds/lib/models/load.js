const cdsv = require('./cdsv')
const path = require('path')

module.exports = Object.assign (load, {only:get})

function load (model, options) {
  return _loadCollectedSources(model, options) || _load.apply(this, [model, options])
  // return _loadCollectedSources (model, options) || _load.call (this, model, options)
}

function get (model) {
  let all = this.resolve(model)
  if (!all) return notFound(model)
  if (all.length > 1) throw new Error(`You can only cds.get a single model`)
  return cdsv.compile(all, '', {parseOnly: true})
}

function _loadCollectedSources (file, options) {
  if (Array.isArray(file) && file.length === 1) [file] = file
  if (typeof file !== 'string' || path.parse(file).base !== 'csn.json') return
  const collectedSources = require(path.resolve('.', file))
  const parsed = cdsv.parse(collectedSources, options)
  parsed._sources.splice(0, parsed._sources.length)
  parsed._sources.push(file)
  return Promise.resolve(parsed)
}

function _load (model, options) {
  // if (!model || model.length == 0)  return Promise.resolve()
  let all = this.resolve (model)
  return all ? cdsv.compile (all, options && options.modelDir ? options.modelDir : '', options) : notFound (model)
}

function notFound (model) {
  return Promise.reject(Object.assign(new Error(`Couldn't find a CDS model at: ${_local(model)}`), {
    code: 'MODEL_NOT_FOUND', model
  }))
}

const _cwd = process.cwd() + require('path').sep
const _local = (path) => ('' + path).replace(_cwd, '')
